/*LINKED LIST*/



#include"iostream"
#include"cstdlib"

using namespace std;

struct node
{
        int data;
        struct node* next;
};

typedef struct node node;

class linkedlist
{
        node* first;
        node* last;
        int totcount;
public:
        linkedlist()
        {
                first=NULL;
                last=NULL;
                totcount=0;
        }

        node* createnode(int data)
        {
                node* newnode = new node;
                newnode->data=data;
 		newnode->next=NULL;
                return newnode;
        }

        void addnode(int data)
        {
                node* newnode = createnode(data);
                if(newnode==NULL)
                {
                        cout<<"Memory is Full. "<<endl;
                        return;
                }
                else if(isEmpty())
                {
                        first=newnode;
                        last=newnode;
                        totcount=totcount+1;
                }
                else
                {
                        last->next=newnode;
                        last=newnode;
                        totcount=totcount+1;
                }

        }

        void insertnode(int data,int pos)
	{
                node* newnode=createnode(data);
                if(newnode==NULL)
                {
                        cout<<"Memory is Full."<<endl;
                        return;
                }
                else if(isEmpty())
                {
                        first=newnode;
                        last=newnode;

                }
                else if(pos==1)
                {
                        newnode->next=first;
                        first=newnode;
                        totcount=totcount+1;
                }
                else if(pos>totcount)
                {
                        last->next=newnode;
                        last=newnode;
                        totcount=totcount+1;
                }
                else
                {
                        node* temp;
                        temp=first;
                        for(int i=1;i<pos-1;i++)
                        {
                                temp=temp->next;     //temp storing adress of next node's address
                        }
                        newnode->next=temp->next;
                        temp->next=newnode;
                        totcount=totcount+1;
                }

        }

        void delnode_value(int data)
        {
                node* temp = first;
                if(isEmpty())
                {
                        cout<<"There is no node to delete!!!"<<endl;
                        return;
                }
                if(totcount==0)
                {
                        first=NULL;
                        last=NULL;
                        cout<<"List is empty no data to delete"<<endl;
                        return;
                }
                else if(first->data==data)
                {
                        first=first->next;
                        delete temp;
                        cout<<"Node deleted!!"<<endl;
                        totcount=totcount-1;
                }

                else
                {
                        while(temp->next->data!=data)
                        {
                                temp=temp->next;
                        }
                        if(temp->next==last)
                        {
                                node* n=last;
                                temp->next=NULL;
                                last=temp;
                                delete n;
                                cout<<"Node deleted!!"<<endl;
                                totcount=totcount-1;
                        }
                        else
                        {
                                node* n=temp->next;
                                temp->next=temp->next->next;
                                delete n;
                                cout<<"Node deleted!!"<<endl;
                                totcount=totcount-1;
                        }
                }

        }
        void delnode_pos(int pos)
        {
                node* temp=first;

                if(isEmpty())
                {
                        cout<<"No nodes to delete!!!"<<endl;
                        return;
                }

                 if(totcount==0)
                {
                        first=NULL;
                        last=NULL;
                        cout<<"List is empty no data at position to delete"<<endl;
                        return;
                }

                else if(pos==1)
                {
                        first=first->next;
                        delete temp;
                        cout<<"Node deleted!!"<<endl;
                        totcount=totcount-1;
                }
                else if(pos>totcount)
                {
                        cout<<"Element at this position does not exist"<<endl;
                }
                else if(pos==1 && first==last)
                {
                        first=NULL;
                        last=NULL;
                        delete temp;
                        cout<<"Node deleted!!"<<endl;
                        totcount=totcount-1;
                }
                else
                {
                        for(int i=1;i<pos-1;i++)
                        {
                                temp=temp->next;
                        }
                        if(temp->next==last)
                        {
                                node* n = temp->next;
                                temp->next=NULL;
                                last=temp;
                                delete n;
                                cout<<"Element deleted"<<endl;
                                totcount=totcount-1;
                        }
                        else
                        {
                                node* n = temp->next;
                                temp->next=temp->next->next;
                                delete n;
                                cout<<"element deleted!!"<<endl;
                                totcount=totcount-1;
                        }
                }

        }

        void display()
        {
                node* temp=first;
                if(isEmpty())
                {
                        cout<<"List is Empty nothing to display"<<endl;
                        return;
                }
                else
                {
                        for(temp=first;temp!=NULL;temp=temp->next)
                        {
                                cout<<temp->data<<endl;
                        }
                }
        }

        void getfirst()
        {
                if(first==NULL)
                {
                        cout<<"No first element available."<<endl;
                        return;
                }
                else
                {
                        cout<<"First node data is: "<<first->data<<endl;
                }
        }

        void getlast()
        {
                 if(last==NULL)
                {
                        cout<<"No last element available."<<endl;
                        return;
                }
                else
                {
                        cout<<"Last node data is: "<<last->data<<endl;
                }
        }


        int isEmpty()
        {
                if(first==NULL && last==NULL)
                {
                        return 1;
                }
                else
                {
                        return 0;
                }
        }

        ~linkedlist()
        {
                node* n;
                node* temp=first;
                while(temp!=NULL)
                {
                        n=temp;
                        temp=temp->next;
                        delete n;

                }
        }
};


int main()
{
        int ch,value,position;
        linkedlist a;

        while (1)
        {
                cout<<"1.Add node. "<<endl<<"2.Insert node at position. "<<endl<<"3.Delete node by value. "<<endl;
                cout<<"4.Delete node by position. "<<endl<<"5.display. "<<endl<<"6.display first node data "<<endl;
                cout<<"7.display last node data."<<endl<<"8.Exit"<<endl;
                cout<<"Enter your choice: ";
                cin>>ch;

                switch(ch)
                {
                        case 1:
                                cout<<"Enter data to add at node: ";
                                cin>>value;
                                a.addnode(value);
                                break;

                        case 2:
                                cout<<"Enter data to add at node: ";
                                cin>>value;
                                cout<<"Enter the position: ";
                                cin>>position;
                                a.insertnode(value,position);
                                break;

                        case 3:
                                cout<<"Enter the data you want to delete: ";
                                cin>>value;
                                a.delnode_value(value);
                                break;

                        case 4:
                                cout<<"Enter position of node to delete: "<<endl;
                                cin>>position;
                                a.delnode_pos(position);
                                break;

                        case 5: a.display();
                                break;

                        case 6: a.getfirst();
                                break;

                        case 7: a.getlast();
                                break;

                        case 8: exit(0);

                        default: cout<<"Invalid input."<<endl;
                }
                cout<<"***************************************************************"<<endl;
                cout<<endl;
        }
}

mahesh mane juhu